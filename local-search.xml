<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java常用工具类</title>
    <link href="/2021/08/27/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2021/08/27/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>📝 任务清单</p><ul><li><input disabled="" type="checkbox"> 异常</li><li><input disabled="" type="checkbox"> 包装类</li><li><input disabled="" type="checkbox"> 集合与泛型</li><li><input disabled="" type="checkbox"> I/O 流</li><li><input disabled="" type="checkbox"> 多线程</li></ul><h2 id="一、异常"><a href="#一、异常" class="headerlink" title="一、异常"></a>一、异常</h2><h2 id="二、包装类"><a href="#二、包装类" class="headerlink" title="二、包装类"></a>二、包装类</h2><h2 id="三、集合与泛型"><a href="#三、集合与泛型" class="headerlink" title="三、集合与泛型"></a>三、集合与泛型</h2><h2 id="四、I-O流"><a href="#四、I-O流" class="headerlink" title="四、I/O流"></a>四、I/O流</h2><h2 id="五、多线程"><a href="#五、多线程" class="headerlink" title="五、多线程"></a>五、多线程</h2>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象</title>
    <link href="/2021/08/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/08/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>📝 任务清单</p><ul><li><input disabled="" type="checkbox"> 类和对象</li><li><input disabled="" type="checkbox"> 继承</li><li><input disabled="" type="checkbox"> 封装</li><li><input disabled="" type="checkbox"> 多态</li></ul><h2 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a>一、类和对象</h2><h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><h2 id="三、封装"><a href="#三、封装" class="headerlink" title="三、封装"></a>三、封装</h2><h2 id="四、多态"><a href="#四、多态" class="headerlink" title="四、多态"></a>四、多态</h2>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础语法</title>
    <link href="/2021/08/27/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/08/27/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ol><li>命名规则<ul><li>标识符可以由字母、数字、下划线(_)和美元符($)组成，但不能以数字开头</li><li>区分大小写</li><li>不能是Java的关键字和保留字</li></ul></li><li>好的习惯<ul><li>标识符的命名最好能反应其作用</li><li>类名是以大写字母开头的名词</li><li>变量：驼峰命名法</li></ul></li></ol><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table>    <tr>        <td>abstract</td>        <td>boolean</td>        <td>break</td>        <td>byte</td>        <td>case</td>        <td>catch</td>    </tr>    <tr>        <td>char</td>        <td>class</td>        <td>continue</td>        <td>default</td>        <td>do</td>        <td>double</td>    </tr>    <tr>        <td>else</td>        <td>extends</td>        <td>false</td>        <td>final</td>        <td>finally</td>        <td>float</td>    </tr>    <tr>        <td>for</td>        <td>if</td>        <td>implements</td>        <td>import</td>        <td>native</td>        <td>int</td>    </tr>    <tr>        <td>interface</td>        <td>long</td>        <td>instanceof</td>        <td>new</td>        <td>null</td>        <td>package</td>    </tr>    <tr>        <td>private</td>        <td>protected</td>        <td>public</td>        <td>return</td>        <td>short</td>        <td>static</td>    </tr>    <tr>        <td>super</td>        <td>switch</td>        <td>synchronized</td>        <td>this</td>        <td>throw</td>        <td>throws</td>    </tr>    <tr>        <td>transient</td>        <td>true</td>        <td>try</td>        <td>void</td>        <td>volatile</td>        <td>while</td>    </tr></table><p>注：以上关键字根据字母顺序排序</p><p>Java 中还有部分保留字</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li><p>什么是变量？</p><ul><li>数据临时存储的场所</li><li>有变量类型、变量名、变量值三个元素</li></ul></li><li><p>命名规则</p><ul><li>参照标识符的命名规则</li></ul></li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>基本数据类型<ul><li>数值型<ul><li>整数类型：<code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code></li><li>浮点类型：<code>float</code>, <code>double</code></li></ul></li><li>字符型：<code>char</code></li><li>布尔型：<code>boolean</code></li></ul></li><li>引用数据类型<ul><li>数组</li><li>类</li><li>接口</li></ul></li></ol><p>字面值</p><div class="hljs code-wrapper"><pre><code>- 整型字面值- 浮点字面值（注意 float 字面值后要加 f）- 字符字面值：用单引号包括- 布尔类型字面值- 字符串字面值：字符串属于类，用双引号包括</code></pre></div><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li>自动类型转换</li><li>强制类型转换：把数据表示范围大的赋值给小的，格式：(Data Type) 数值</li></ol><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><code>final int A = 1;</code></p><ul><li><p>常量定义后不能用赋值运算符修改</p></li><li><p>常量命名一般全部使用大写，多个单词使用下划线分隔</p></li></ul><h2 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h2><p>​    表达式：由运算符和操作数组成</p><ol><li>算数运算符：<code>+, -, *, /, %, ++, --</code></li><li>赋值运算符：<code>=</code>, 复合赋值</li><li>关系运算符：<code>&gt;, &lt;, &gt;=, &lt;=, ==, !=</code>, 比较结果为布尔值</li><li>逻辑运算符：<code>&amp;&amp; 或 &amp;, || 或 |, !</code></li><li>条件运算符：<code>? : </code>, 布尔表达式? 表达式1:表达式2</li><li>位运算符</li></ol><h2 id="三、流程控制"><a href="#三、流程控制" class="headerlink" title="三、流程控制"></a>三、流程控制</h2><ol><li>顺序结构</li><li>选择结构<ul><li>if-else 结构</li><li>switch 结构</li></ul></li><li>循环结构<ul><li>while</li><li>do-while</li><li>for</li></ul></li></ol><ul><li>break 语句</li><li>continue 语句</li></ul><h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><ol><li><p>什么是数组？</p><p>相同类型的数据按顺序组成的一种引用数据类型。</p></li><li><p>一维数组</p><ul><li>数组声明创建：数据类型[] 数组名 = new 数组类型[数组长度]</li><li>数组初始化：声明时赋值</li><li>数组元素的引用：下标从零开始</li><li>数组长度：array.length</li></ul></li><li><p>多维数组</p></li></ol><ul><li><p>foreach 循环</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(ElementType element: arrayName) &#123;<br>System.out.println(element);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>冒泡排序</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] bubbleSort(<span class="hljs-keyword">int</span>[] a) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a.length - i - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span>(a[j] &gt; a[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = a[j];<br>                    a[j] = a[j + <span class="hljs-number">1</span>];<br>                    a[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="五、方法"><a href="#五、方法" class="headerlink" title="五、方法"></a>五、方法</h2><ol><li><p>什么是方法？</p><p>用来解决一类问题的代码的有序组合，是一个功能模块。</p></li><li><p>方法的声明和调用</p><ul><li><p>语法格式：</p><p>访问修饰符 返回类型 方法名(参数列表) {</p><p>​    方法体</p><p>}</p></li><li><p>类名打点调用</p></li></ul></li><li><p>方法重载</p><p>方法名相同，参数列表不同，不考虑返回类型。</p></li><li><p>可变参数列表</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... n)</span></span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>注：可变参数一定在最后</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法学习（一）</title>
    <link href="/2021/08/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/08/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一、什么是数据结构？"><a href="#一、什么是数据结构？" class="headerlink" title="一、什么是数据结构？"></a>一、什么是数据结构？</h2><ol><li><strong>数据对象</strong>在计算机中的组织方式<ul><li>逻辑结构<ul><li>线性结构：一对一</li><li>树型结构：一对多</li><li>图：多对多</li></ul></li><li>物理存储结构：逻辑结构在计算机中如何存放</li></ul></li><li>数据对象必定与加在其上的<strong>操作</strong>相关联</li><li>实现这些操作所用的方法叫做<strong>算法</strong></li></ol><h2 id="二、如何描述数据结构？"><a href="#二、如何描述数据结构？" class="headerlink" title="二、如何描述数据结构？"></a>二、如何描述数据结构？</h2><h3 id="数据类型抽象（Abstract-Data-Type）"><a href="#数据类型抽象（Abstract-Data-Type）" class="headerlink" title="数据类型抽象（Abstract Data Type）"></a>数据类型抽象（Abstract Data Type）</h3><ol><li>数据类型<ul><li>数据对象集</li><li>数据集合相关联的操作集</li></ul></li></ol><blockquote><p>其实在C语言中这两个东西是分开处理的，但是在 C++ 和 Java 等 OO 语言中，它们是封装在一个类里的。</p></blockquote><ol start="2"><li><p>抽象：描述数据类型的方法不依赖于具体实现</p><ul><li>与存放数据的机器无关</li><li>与数据存储的物理结构无关</li><li>与实现操作的算法和编程语言均无关</li></ul></li><li><p>例：矩阵的 ADT 定义</p><ul><li>类型名称：矩阵（Matrix）</li><li>数据对象集：一个 M x N 的矩阵 A <sub>MxN</sub> = (a<sub>ij</sub>) 由 M x N 个三元组&lt;a, i, j&gt;构成，其中 a 是矩阵元素的值，i 是元素所在的行号，j 是元素所在的列号。</li><li>操作集<ul><li>Matrix Creat(int M, int N): 返回一个 M x N 的空矩阵</li><li>int GetRow(Matrix A): 返回 A 的行数</li><li>int GetCol(Matrix A): 返回 A 的列数</li><li>ElementType GetEntry(Matrix A, int i, int j): 返回矩阵第 i 行，第 j 列的元素</li><li>Matrix Add(Matrix A, Matrix B): 如果 A、B 行列数一致，返回它们的和，否则返回错误信息</li><li>Matrix Multiply(Matrix A, Matrix B): 如果 A 的行数等于 B 的列数，返回它们的积，否则返回错误信息</li></ul></li></ul></li></ol><h2 id="三、什么是算法？"><a href="#三、什么是算法？" class="headerlink" title="三、什么是算法？"></a>三、什么是算法？</h2><ol><li>一个有限指令集<ul><li>有充分明确的目标</li><li>计算机能处理的范围之内</li><li>描述不依赖于计算机语言和具体实现步骤</li></ul></li><li>一定有输出，接受一些输入</li><li>有限个步骤</li></ol><h2 id="四、什么是好的算法？"><a href="#四、什么是好的算法？" class="headerlink" title="四、什么是好的算法？"></a>四、什么是好的算法？</h2><ol><li><p>空间复杂度低</p> <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 打印 1 ~ N</span><br><span class="hljs-comment"> 1.递归</span><br><span class="hljs-comment"> 2.for 循环</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintN</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">PrintN</span>(n - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintN</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>时间复杂度低</p> <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 计算多项式的值</span><br><span class="hljs-comment"> 1.pow</span><br><span class="hljs-comment"> 2.提取x</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">f1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">double</span> a[], <span class="hljs-keyword">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> p = a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        p += a[i] * <span class="hljs-built_in">pow</span>(x, i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">double</span> a[], <span class="hljs-keyword">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> p = a[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        p = a[i - <span class="hljs-number">1</span>] + x * p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></div></td></tr></table></figure><p> &emsp;&emsp;上面两个算法区别在于 for 循环里的那个语句，其实上面这个语句是因为有 pow 函数而多做了一些乘法。<br> &emsp;&emsp;分析算法的效率时，我们经常关注的是<strong>最坏情况复杂度</strong>和<strong>平均复杂度</strong>，但是比较容易分析的是最坏情况复杂度.</p></li><li><p>复杂度的渐近表示法</p><ul><li>O(n): 上界</li><li>Ω(n): 下界</li></ul><p> 常见 n:</p><ul><li>1</li><li>log n</li><li>n</li><li>n log n</li><li>n<sup>2</sup></li><li>n<sup>3</sup></li><li>2<sup>n</sup></li><li>n!</li></ul></li><li><p>例：最大子列和问题  </p></li></ol><ul><li><p>暴力解法：O(n<sup>3</sup>)</p>  <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MaxSubseqSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ThisSum, MaxSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; n; j++)<br>        &#123;<br>            ThisSum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = i; k &lt;= j; k++)<br>                ThisSum += a[k];<br>            <span class="hljs-keyword">if</span>(ThisSum &gt; MaxSum)<br>                MaxSum = ThisSum;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> MaxSum;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>优化（穷举法）：O(n<sup>2</sup>)</p>  <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MaxSubseqSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ThisSum, MaxSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        ThisSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; n; j++)<br>        &#123;<br>            ThisSum += a[j];<br>            <span class="hljs-keyword">if</span>(ThisSum &gt; MaxSum)<br>                MaxSum = ThisSum;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> MaxSum;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>  &emsp;&emsp;至此，算法时间复杂度已经变成 O(n<sup>2</sup>)，但是作为一个程序员，看到 O(n<sup>2</sup>)的算法要时刻去想它能不能变成 O(nlogn) 的算法.  </p></li><li><p>分而治之（分治法）：O(nlogn)</p>  <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">/* 返回三个数之中的最大数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MaxSubseqSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> MaxLeftSum = <span class="hljs-number">0</span>, MaxRightSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> MaxLeftBorderSum = <span class="hljs-number">0</span>, MaxRightBorderSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> LeftBorderSum = <span class="hljs-number">0</span>, RightBorderSum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span>(left == right)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[left] &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> center = (left + right) / <span class="hljs-number">2</span>;<br><br>    MaxLeftSum = <span class="hljs-built_in">MaxSubseqSum</span>(a, left, center);<br>    MaxRightSum = <span class="hljs-built_in">MaxSubseqSum</span>(a, center + <span class="hljs-number">1</span>, right);<br><br>    <span class="hljs-comment">/* 左半边最大和 */</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = center; i &gt;= left; i--)<br>    &#123;<br>        LeftBorderSum += a[i];<br>        <span class="hljs-keyword">if</span> (LeftBorderSum &gt; MaxLeftBorderSum)<br>            MaxLeftBorderSum = LeftBorderSum;<br>    &#125;<br>    <span class="hljs-comment">/* 右半边最大和 */</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = center + <span class="hljs-number">1</span>; i &lt;= right; i++)<br>    &#123;<br>        RightBorderSum += a[i];<br>        <span class="hljs-keyword">if</span> (RightBorderSum &gt; MaxRightBorderSum)<br>            MaxRightBorderSum = RightBorderSum;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Max</span>(MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>在线处理（贪心法）：O(n)</p>  <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MaxSubseqSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ThisSum = <span class="hljs-number">0</span>, MaxSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        ThisSum += a[i];<br>        <span class="hljs-keyword">if</span>(ThisSum &gt; MaxSum)<br>            MaxSum = ThisSum;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ThisSum &lt; <span class="hljs-number">0</span>)<br>            ThisSum = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> MaxSum;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
