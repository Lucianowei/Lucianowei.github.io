<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构与算法学习（一）</title>
    <link href="/2021/08/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/08/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一、什么是数据结构？"><a href="#一、什么是数据结构？" class="headerlink" title="一、什么是数据结构？"></a>一、什么是数据结构？</h2><ol><li><strong>数据对象</strong>在计算机中的组织方式<ul><li>逻辑结构<ul><li>线性结构：一对一</li><li>树型结构：一对多</li><li>图：多对多</li></ul></li><li>物理存储结构：逻辑结构在计算机中如何存放</li></ul></li><li>数据对象必定与加在其上的<strong>操作</strong>相关联</li><li>实现这些操作所用的方法叫做<strong>算法</strong></li></ol><h2 id="二、如何描述数据结构？"><a href="#二、如何描述数据结构？" class="headerlink" title="二、如何描述数据结构？"></a>二、如何描述数据结构？</h2><h3 id="数据类型抽象（Abstract-Data-Type）"><a href="#数据类型抽象（Abstract-Data-Type）" class="headerlink" title="数据类型抽象（Abstract Data Type）"></a>数据类型抽象（Abstract Data Type）</h3><ol><li>数据类型<ul><li>数据对象集</li><li>数据集合相关联的操作集</li></ul></li></ol><blockquote><p>其实在C语言中这两个东西是分开处理的，但是在 C++ 和 Java 等 OO 语言中，它们是封装在一个类里的。</p></blockquote><ol start="2"><li><p>抽象：描述数据类型的方法不依赖于具体实现</p><ul><li>与存放数据的机器无关</li><li>与数据存储的物理结构无关</li><li>与实现操作的算法和编程语言均无关</li></ul></li><li><p>例：矩阵的 ADT 定义</p><ul><li>类型名称：矩阵（Matrix）</li><li>数据对象集：一个 M x N 的矩阵 A <sub>MxN</sub> = (a<sub>ij</sub>) 由 M x N 个三元组&lt;a, i, j&gt;构成，其中 a 是矩阵元素的值，i 是元素所在的行号，j 是元素所在的列号。</li><li>操作集<ul><li>Matrix Creat(int M, int N): 返回一个 M x N 的空矩阵</li><li>int GetRow(Matrix A): 返回 A 的行数</li><li>int GetCol(Matrix A): 返回 A 的列数</li><li>ElementType GetEntry(Matrix A, int i, int j): 返回矩阵第 i 行，第 j 列的元素</li><li>Matrix Add(Matrix A, Matrix B): 如果 A、B 行列数一致，返回它们的和，否则返回错误信息</li><li>Matrix Multiply(Matrix A, Matrix B): 如果 A 的行数等于 B 的列数，返回它们的积，否则返回错误信息</li></ul></li></ul></li></ol><h2 id="三、什么是算法？"><a href="#三、什么是算法？" class="headerlink" title="三、什么是算法？"></a>三、什么是算法？</h2><ol><li>一个有限指令集<ul><li>有充分明确的目标</li><li>计算机能处理的范围之内</li><li>描述不依赖于计算机语言和具体实现步骤</li></ul></li><li>一定有输出，接受一些输入</li><li>有限个步骤</li></ol><h2 id="四、什么是好的算法？"><a href="#四、什么是好的算法？" class="headerlink" title="四、什么是好的算法？"></a>四、什么是好的算法？</h2><ol><li><p>空间复杂度低</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 打印 1 ~ N</span><br><span class="hljs-comment"> 1.递归</span><br><span class="hljs-comment"> 2.for 循环</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintN</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">if</span>(n != <span class="hljs-number">0</span>)<br> &#123;<br>  PrintN(n - <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n);<br> &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintN</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>时间复杂度低</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 计算多项式的值</span><br><span class="hljs-comment"> 1.pow</span><br><span class="hljs-comment"> 2.提取x</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">f1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">double</span> a[], <span class="hljs-keyword">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> p = a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        p += a[i] * <span class="hljs-built_in">pow</span>(x, i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">double</span> a[], <span class="hljs-keyword">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> p = a[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        p = a[i - <span class="hljs-number">1</span>] + x * p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p> &emsp;&emsp;上面两个算法区别在于 for 循环里的那个语句，其实上面这个语句是因为有 pow 函数而多做了一些乘法。<br> &emsp;&emsp;分析算法的效率时，我们经常关注的是<strong>最坏情况复杂度</strong>和<strong>平均复杂度</strong>，但是比较容易分析的是最坏情况复杂度.</p></li><li><p>复杂度的渐近表示法</p><ul><li>O(n): 上界</li><li>Ω(n): 下界</li></ul><p> 常见 n:</p><ul><li>1</li><li>log n</li><li>n</li><li>n log n</li><li>n<sup>2</sup></li><li>n<sup>3</sup></li><li>2<sup>n</sup></li><li>n!</li></ul></li><li><p>例：最大子列和问题  </p></li></ol><ul><li><p>暴力解法：O(n<sup>3</sup>)</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MaxSubseqSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ThisSum, MaxSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; n; j++)<br>        &#123;<br>            ThisSum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = i; k &lt;= j; k++)<br>                ThisSum += a[k];<br>            <span class="hljs-keyword">if</span>(ThisSum &gt; MaxSum)<br>                MaxSum = ThisSum;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> MaxSum;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>优化（穷举法）：O(n<sup>2</sup>)</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MaxSubseqSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ThisSum, MaxSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        ThisSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; n; j++)<br>        &#123;<br>            ThisSum += a[j];<br>            <span class="hljs-keyword">if</span>(ThisSum &gt; MaxSum)<br>                MaxSum = ThisSum;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> MaxSum;<br>&#125;<br></code></pre></td></tr></table></figure><p>  &emsp;&emsp;至此，算法时间复杂度已经变成 O(n<sup>2</sup>)，但是作为一个程序员，看到 O(n<sup>2</sup>)的算法要时刻去想它能不能变成 O(nlogn) 的算法.  </p></li><li><p>分而治之（分治法）：O(nlogn)</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* 返回三个数之中的最大数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MaxSubseqSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> MaxLeftSum = <span class="hljs-number">0</span>, MaxRightSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> MaxLeftBorderSum = <span class="hljs-number">0</span>, MaxRightBorderSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> LeftBorderSum = <span class="hljs-number">0</span>, RightBorderSum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span>(left == right)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[left] &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> center = (left + right) / <span class="hljs-number">2</span>;<br><br>    MaxLeftSum = MaxSubseqSum(a, left, center);<br>    MaxRightSum = MaxSubseqSum(a, center + <span class="hljs-number">1</span>, right);<br><br>    <span class="hljs-comment">/* 左半边最大和 */</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = center; i &gt;= left; i--)<br>    &#123;<br>        LeftBorderSum += a[i];<br>        <span class="hljs-keyword">if</span> (LeftBorderSum &gt; MaxLeftBorderSum)<br>            MaxLeftBorderSum = LeftBorderSum;<br>    &#125;<br>    <span class="hljs-comment">/* 右半边最大和 */</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = center + <span class="hljs-number">1</span>; i &lt;= right; i++)<br>    &#123;<br>        RightBorderSum += a[i];<br>        <span class="hljs-keyword">if</span> (RightBorderSum &gt; MaxRightBorderSum)<br>            MaxRightBorderSum = RightBorderSum;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Max(MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在线处理（贪心法）：O(n)</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MaxSubseqSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ThisSum = <span class="hljs-number">0</span>, MaxSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        ThisSum += a[i];<br>        <span class="hljs-keyword">if</span>(ThisSum &gt; MaxSum)<br>            MaxSum = ThisSum;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ThisSum &lt; <span class="hljs-number">0</span>)<br>            ThisSum = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> MaxSum;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
